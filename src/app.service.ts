import { Injectable } from "@nestjs/common";
import { InjectModel } from "@nestjs/sequelize";
import { InjectBot } from "nestjs-telegraf";
import { Context, Markup, Telegraf } from "telegraf";
import { MyBotName } from "./app.constants";
import { User } from "./models/user.model";
import { mainmenu } from "./helpers/main_menu";
import { profilPart } from "./helpers/profil_part";

@Injectable()
export class AppService {
  constructor(
    @InjectModel(User) private userRepository: typeof User,
    @InjectBot(MyBotName) private readonly bot: Telegraf<Context>
  ) {}
  async start(ctx: Context) {
    const user = await this.userRepository.findOne({
      where: { user_id: String(ctx.from.id) },
    });
    if (!user?.dataValues?.status) {
      if (!user) {
        await this.userRepository.create({
          user_id: String(ctx.from.id),
          first_name: ctx.from.first_name,
          last_name: ctx.from.last_name,
          username: ctx.from.username,
        });
      }
      await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
      await ctx.reply(
        `Assalomu alaykum! | –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\nTilni tanlang | –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:`,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([
            ["üá∫üáø O'zbek tili","üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"],
          ])
            .oneTime()
            .resize(),
        }
      );
    } else {
      if(user.last_state != 'finish') {
        await this.userRepository.update(
          { last_state: "lang" },
          { where: { user_id: String(ctx.from.id) } }
        );
      }

      await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
      if(user.user_lang == 'UZB') {
        return mainmenu(ctx,'UZB')
      } else {
        return mainmenu(ctx,'RUS')
      }
    }
  }

  async langUz(ctx:Context) {
    return this.saveLang(ctx,'UZB')
  }

  async langRu(ctx: Context) {
    return this.saveLang(ctx,'RUS')
  }
  async onContact(ctx: any) {
    const user = await this.userRepository.findOne({
      where: { user_id: String(ctx.from.id) },
    });
    if(user.user_lang == 'UZB') {
      if (!user) {
        await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
        await ctx.reply(`Iltimos, <b>start</b> tugmasini bosing! üëá`, {
          parse_mode: "HTML",
          ...Markup.keyboard([["/start"]])
            .oneTime()
            .resize(),
        });
      }
      if (ctx.message.contact.user_id !== ctx.from.id) {
        await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
        await ctx.reply(
          `Iltimos o'zingizni raqamingizni yuboring, <b>"Telefon raqamni yuborish"</b> tugmasini bosing! `,
          {
            parse_mode: "HTML",
            ...Markup.keyboard([
              [Markup.button.contactRequest("üìû Telefon raqamni yuborish")],
            ])
              .oneTime()
              .resize(),
          }
        );
      }
      await this.userRepository.update(
        {
          phone_number: ctx.message.contact.phone_number,
          status: true,
          last_state: "real_name",
        },
        { where: { user_id: String(ctx.from.id) } }
      );
      await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
      await ctx.reply(`<b>Sizga murojaat qilish uchun quyidagi ismingizni tanlang:</b>`, {
        parse_mode: "HTML",
        ...Markup.inlineKeyboard([Markup.button.callback(`Men ${ctx.from.username} ismini tanlayman`,'defaultsave')])
      });
      await ctx.replyWithHTML('Yoki haqiqiy ismingizni kiriting:')
    } else {
      if (ctx.message.contact.user_id !== ctx.from.id) {
        await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
        await ctx.reply(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b> –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É! `,
          {
            parse_mode: "HTML",
            ...Markup.keyboard([
              [Markup.button.contactRequest("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
            ])
              .oneTime()
              .resize(),
          }
        );
      }
      await this.userRepository.update(
        {
          phone_number: ctx.message.contact.phone_number,
          status: true,
          last_state: "real_name",
        },
        { where: { user_id: String(ctx.from.id) } }
      );
      await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
      await ctx.reply(`<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`, {
        parse_mode: "HTML",
        ...Markup.inlineKeyboard([Markup.button.callback(`–Ø "${ctx.from.username}" –≤—ã–±–∏—Ä–∞—é –∏–º—è`,'defaultsave')])
      });
      await ctx.replyWithHTML('–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è:')
    }
  }

  async onStop(ctx: Context) {
    const user = await this.userRepository.findOne({
      where: { user_id: String(ctx.from.id) },
    });

    if (user?.dataValues.status) {
      await this.userRepository.update(
        { status: false, last_state: null },
        { where: { user_id: String(ctx.from.id) } }
      );

      await this.bot.telegram.sendChatAction(ctx.from.id, "typing");
      await ctx.reply(
        `Botdan chiqib ketdingiz, <b>start</b> tugmasini bosing! üëá`,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([["/start"]])
            .oneTime()
            .resize(),
        }
      );
    } else {
      await ctx.reply(
        `Botdan mavjud emassiz, <b>start</b> tugmasini bosing! üëá`,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([["/start"]])
            .oneTime()
            .resize(),
        }
      );
    }
  }

  async saveLang(ctx:Context, lang:String) {
    await User.update({
      user_lang: `${lang}`,
      last_state:'registration'
    },{
      where:{
        user_id: String(ctx.from.id)
      }
    })
    if(lang === 'UZB') {
      await ctx.reply(`Siz <b>¬´Lady Taxi¬ª</b> botidan ilk marta foydalanayotganingiz uchun,
  bir martalik ro'yxatdan o'tishingiz lozim!`,{
        parse_mode:'HTML',
        ...Markup.keyboard(["‚úÖ Ro'yxatdan o'tish"])
          .oneTime()
          .resize()
      })
    } else if(lang == 'RUS'){
        await ctx.reply(`–¢–∞–∫ –∫–∞–∫ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º <b>¬´Lady Taxi¬ª</b>, 
–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑!`,{
          parse_mode:'HTML',
          ...Markup.keyboard(["‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"])
            .oneTime()
            .resize()
        })
    }
  }
  async registration(ctx:Context,lang:String) {
    if (lang == 'UZB') {
      await ctx.reply(
        `Iltimos o'zingizni raqamingizni yuboring, <b>"Telefon raqamni yuborish"</b> tugmasini bosing! `,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([
            [Markup.button.contactRequest("üìû Telefon raqamni yuborish")],
          ])
            .oneTime()
            .resize(),
        }
       );
      }
    else {
      await ctx.reply(
        ` –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"</b>! `,
        {
          parse_mode: "HTML",
          ...Markup.keyboard([
            [Markup.button.contactRequest("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
          ])
            .oneTime()
            .resize(),
        }
      );
    }
  }

  async saveName(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    await this.userRepository.update({
      real_name:`${user.username}`,
      last_state:'ads_phone_number'
    },{
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.user_lang == 'UZB') {
      await ctx.reply(`<b>Siz bilan bog'lanish uchun quyidagi telefon raqamingizni tanlang:</b>`, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback(`Men ${user.phone_number} raqamini tanlayman`, 'savedefaultphone')])
      })
      await ctx.replyWithHTML('Yoki boshqa ishlab turgan telefon raqam kiriting (namuna: 931234567):')
    } else {
      await ctx.reply(`<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`, {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback(`—è –≤—ã–±–∏—Ä–∞—é ${user.phone_number} –Ω–æ–º–µ—Ä`, 'savedefaultphone')])
      })
      await ctx.replyWithHTML('–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 931234567):')
    }
  }

  async onMessage(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.last_state === "real_name") {
      if('text' in ctx.message) {
        await this.userRepository.update({
          real_name: `${ctx.message.text}`,
          last_state: 'ads_phone_number'
        }, {
          where: {
            user_id: `${ctx.from.id}`
          }
        })
      }
      if(user.user_lang == 'UZB') {
        await ctx.reply(`<b>Siz bilan bog'lanish uchun quyidagi telefon raqamingizni tanlang:</b>`, {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([Markup.button.callback(`Men ${user.phone_number} raqamini tanlayman`, 'savedefaultphone')])
        })
        await ctx.reply('Yoki boshqa ishlab turgan telefon raqam kiriting (namuna: 931234567):')
      } else {
        await ctx.reply(`<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏:</b>`, {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([Markup.button.callback(`—è –≤—ã–±–∏—Ä–∞—é ${user.phone_number} –Ω–æ–º–µ—Ä`, 'savedefaultphone')])
        })
        await ctx.reply('–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: 931234567):')
      }
    } else if(user.last_state === 'ads_phone_number'){
        if('text' in ctx.message) {
          await this.userRepository.update({
            ads_phone_number: `${ctx.message.text}`,
            last_state: 'finish'
          }, {
            where: {
              user_id: `${ctx.from.id}`
            }
          })
        }
      if(user.user_lang == 'UZB') {
        return mainmenu(ctx,'UZB')
      } else {
        return mainmenu(ctx,'RUS')
      }
    } else if(user.last_state == 'changeName') {
      const user = await this.userRepository.findOne({
        where:{
          user_id:`${ctx.from.id}`
        }
      })
      if('text' in ctx.message) {
        await this.userRepository.update({
          real_name:`${ctx.message.text}`,
          last_state:'finish'
        },{
          where:{
            user_id:`${ctx.from.id}`
          }
        })
      }
      if(user.user_lang == 'UZB') {
        if ('text' in ctx.message) {
          await ctx.replyWithHTML(`Ismingiz ${ctx.message.text} ga o'zgartirildi`,{
            parse_mode:'HTML',
            ...Markup.keyboard([["üöñ Taksi chaqirish üôã‚Äç‚ôÄÔ∏è", "üöö Yetkazib berish üôã‚Äç‚ôÄÔ∏è"], ["üôéüèº‚Äç‚ôÄÔ∏è Profil", "üè† Doimiy manzillar"]])
              .oneTime()
              .resize()
          })
        }
      } else {
        if('text' in ctx.message) {
          await ctx.replyWithHTML(`–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${ctx.message.text}`,{
            parse_mode:'HTML',
            ...Markup.keyboard([["üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üôã‚Äç‚ôÄÔ∏è", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ üôã‚Äç‚ôÄÔ∏è"],["üôéüèº‚Äç –ø—Ä–æ—Ñ–∏–ª—å", "üè† –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"]])
              .oneTime()
              .resize()
          })
        }
      }
    } else if(user.last_state === 'changePhoneNumber'){
        const user = await this.userRepository.findOne({
          where:{
          user_id:`${ctx.from.id}`
            }
        })
      if('text' in ctx.message) {
        await this.userRepository.update({
          ads_phone_number:`${ctx.message.text}`,
          last_state:'finish'
        },{
          where:{
            user_id:`${ctx.from.id}`
          }
        })
      }
      if(user.user_lang == 'UZB') {
        if ('text' in ctx.message) {
          await ctx.replyWithHTML(`Telefon raqamingiz ${ctx.message.text} ga o'zgartirildi`,{
            parse_mode:'HTML',
            ...Markup.keyboard([["üöñ Taksi chaqirish üôã‚Äç‚ôÄÔ∏è", "üöö Yetkazib berish üôã‚Äç‚ôÄÔ∏è"], ["üôéüèº‚Äç‚ôÄÔ∏è Profil", "üè† Doimiy manzillar"]])
              .oneTime()
              .resize()
          })
        }
      }  else {
      if('text' in ctx.message) {
        await ctx.replyWithHTML(`–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ ${ctx.message.text}`,{
          parse_mode:'HTML',
          ...Markup.keyboard([["üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üôã‚Äç‚ôÄÔ∏è", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ üôã‚Äç‚ôÄÔ∏è"],["üôéüèº‚Äç –ø—Ä–æ—Ñ–∏–ª—å", "üè† –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"]])
            .oneTime()
            .resize()
        })
      }
    }
    }
  }
  async defaultSavePhone(ctx:Context){
    const user = await this.userRepository.findOne({
      where:{
        user_id: `${ctx.from.id}`
      }
    })
    await this.userRepository.update({
      last_state:"finish"
    },{
      where: {
        user_id: `${ctx.from.id}`
      }
    })
    if(user.user_lang === 'UZB'){
      return mainmenu(ctx,'UZB')
    } else {
      return mainmenu(ctx,'RUS')
    }
  }

  async hearsProfil(ctx:Context,lang:String) {
    if(lang == 'UZB'){
      return profilPart(ctx,'UZB')
    } else {
      return profilPart(ctx,'RUS')
    }
  }

  async changeName(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    await this.userRepository.update({
      last_state: 'changeName'
    },{
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.user_lang == 'UZB'){
      await ctx.reply('Ismingizni kiriting',{
        parse_mode:'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è Bekor qilish','cancelling')])
      })
    } else if(user.user_lang == 'RUS') {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',{
        parse_mode:'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞','cancelling')])
      })
    }
  }

  async phoneNumber(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id: `${ctx.from.id}`
      }
    })
    await this.userRepository.update({
      last_state:'changePhoneNumber'
    },{
      where:{
        user_id: `${ctx.from.id}`
      }
    })
    if(user.user_lang == 'UZB') {
      await ctx.reply(`Yangi telefon raqam kiriting`,{
        parse_mode:'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è Bekor qilish','cancelling')])
      })
    } else {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',{
        parse_mode:'HTML',
        ...Markup.inlineKeyboard([Markup.button.callback('üôÖ‚Äç‚ôÄÔ∏è –û—Ç–º–µ–Ω–∞','cancelling')])
      })
    }
  }
  async cancel(ctx:Context) {
    await this.userRepository.update({
      last_state:'finish'
    },{
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.user_lang === 'UZB') {
        await ctx.replyWithHTML(`<b>Lady Taxy</b> bilan hammasi yanada oson ! `, {
          parse_mode: 'HTML',
          ...Markup.keyboard([["üöñ Taksi chaqirish üôã‚Äç‚ôÄÔ∏è", "üöö Yetkazib berish üôã‚Äç‚ôÄÔ∏è"], ["üôéüèº‚Äç‚ôÄÔ∏è Profil", "üè† Doimiy manzillar"]])
            .oneTime()
            .resize()
        })
    }else {
        await ctx.replyWithHTML(`–° <b>Lady Taxy</b> –≤—Å–µ –ø—Ä–æ—â–µ! `,{
          parse_mode:'HTML',
          ...Markup.keyboard([["üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üôã‚Äç‚ôÄÔ∏è", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ üôã‚Äç‚ôÄÔ∏è"],["üôéüèº‚Äç –ø—Ä–æ—Ñ–∏–ª—å", "üè† –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"]])
            .oneTime()
            .resize()
        })
    }
  }

  async changeLanguage(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    await ctx.reply('<b>Tilni tanlang/–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b>',{
      parse_mode:'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback(`üá∫üáø O'zbek tili`,`uzblang`)],
        [Markup.button.callback(`üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫`,`rulang`)],
        [Markup.button.callback(`üôÖ‚Äç‚ôÄÔ∏è Bekor qilish/–û—Ç–º–µ–Ω–∞`,`cancelling`)]
      ])
    })
  }

  async changeRuLang(ctx: Context) {
    await this.userRepository.update({
      user_lang:'RUS'
    },{
      where:{
        user_id:`${ctx.from.id}`
      }
    });
    await ctx.reply("<b>–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!</b>",{
      parse_mode:'HTML',
      ...Markup.keyboard(["üë©‚Äçü¶± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
        .oneTime()
        .resize()
    })

  }
  async changeUzLang(ctx:Context) {
    await this.userRepository.update({
      user_lang:'UZB'
    },{
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    await ctx.reply("<b>Til o'zgartirildi</b>",{
      parse_mode:'HTML',
      ...Markup.keyboard(["üë© Asosiy sahifa"])
        .oneTime()
        .resize()
    })
  }

  async toMainMenu(ctx:Context, lang:String) {
    if(lang === 'UZB'){
      await ctx.reply(`<b>üåπ Lady Taxy</b> to'gri tanlov`,{
        parse_mode:'HTML',
        ...Markup.keyboard([["üöñ Taksi chaqirish üôã‚Äç‚ôÄÔ∏è", "üöö Yetkazib berish üôã‚Äç‚ôÄÔ∏è"], ["üôéüèº‚Äç‚ôÄÔ∏è Profil", "üè† Doimiy manzillar"]])
          .oneTime()
          .resize()
      })
    } else {
      await ctx.reply(`<b>üåπ Lady Taxy </b> –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä`,{
        parse_mode:'HTML',
        ...Markup.keyboard([["üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏ üôã‚Äç‚ôÄÔ∏è", "üöö –î–æ—Å—Ç–∞–≤–∫–∞ üôã‚Äç‚ôÄÔ∏è"],["üôéüèº‚Äç –ø—Ä–æ—Ñ–∏–ª—å", "üè† –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞"]])
          .oneTime()
          .resize()
      })
    }
  }

  async ruleCallTaxy(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.user_lang == 'UZB') {
      await ctx.reply('<b>Bu yerda ¬´Taksi chaqirish tartibi¬ª yoziladi</b>',{
        parse_mode:'HTML',
        ...Markup.keyboard(["üë© Asosiy sahifa"])
          .oneTime()
          .resize()
      })
    } else {
      await ctx.reply(`<b>"–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤—ã–∑–æ–≤–∞ —Ç–∞–∫—Å–∏" –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑–¥–µ—Å—å</b>`,{
        parse_mode:'HTML',
        ...Markup.keyboard(["üë©‚Äçü¶± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
          .oneTime()
          .resize()
      })
    }
  }

  async ruleContract(ctx:Context) {
    const user = await this.userRepository.findOne({
      where:{
        user_id:`${ctx.from.id}`
      }
    })
    if(user.user_lang == 'UZB') {
      await ctx.reply('<b>Bu yerda ¬´Foydalanuvchi shartnomasi¬ª yoziladi</b>',{
        parse_mode:'HTML',
        ...Markup.keyboard(["üë© Asosiy sahifa"])
          .oneTime()
          .resize()
      })
    } else {
      await ctx.reply(`<b>"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ" –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑–¥–µ—Å—å</b>`,{
        parse_mode:'HTML',
        ...Markup.keyboard(["üë©‚Äçü¶± –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"])
          .oneTime()
          .resize()
      })
    }
  }
}
